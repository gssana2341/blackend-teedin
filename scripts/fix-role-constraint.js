const { createClient } = require("@supabase/supabase-js");
const fs = require("fs");
const path = require("path");

// Manually load environment variables from .env.local
function loadEnvFile() {
  const envPath = path.join(__dirname, "..", ".env.local");
  const envContent = fs.readFileSync(envPath, "utf8");
  const lines = envContent.split("\n");

  const env = {};
  lines.forEach(line => {
    const trimmed = line.trim();
    if (trimmed && !trimmed.startsWith("#") && trimmed.includes("=")) {
      const [key, ...valueParts] = trimmed.split("=");
      env[key] = valueParts.join("=").replace(/^["']|["']$/g, "");
    }
  });

  return env;
}

const env = loadEnvFile();
const supabaseUrl = env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = env.SUPABASE_SERVICE_ROLE_KEY;

const supabase = createClient(supabaseUrl, supabaseServiceKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false,
  },
});

async function fixRoleConstraint() {
  try {
    console.log("üîß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Database Schema...\n");

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö constraint ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    console.log("1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö role constraint ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô...");

    const { data: constraintInfo, error: constraintError } = await supabase
      .from("information_schema.columns")
      .select("column_name, data_type, character_maximum_length")
      .eq("table_name", "users")
      .eq("column_name", "role");

    if (!constraintError && constraintInfo) {
      console.log("üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• role column:", constraintInfo);
    }

    console.log("\n2. ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏±‡∏ô SQL ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç...");

    // ‡∏£‡∏±‡∏ô SQL ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ç‡∏¢‡∏≤‡∏¢ role column ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó constraint
    const sqlCommands = [
      // ‡∏•‡∏ö constraint ‡πÄ‡∏Å‡πà‡∏≤
      `ALTER TABLE users DROP CONSTRAINT IF EXISTS users_role_check;`,

      // ‡∏Ç‡∏¢‡∏≤‡∏¢‡∏Ç‡∏ô‡∏≤‡∏î column
      `ALTER TABLE users ALTER COLUMN role TYPE VARCHAR(20);`,

      // ‡πÄ‡∏û‡∏¥‡πà‡∏° constraint ‡πÉ‡∏´‡∏°‡πà
      `ALTER TABLE users ADD CONSTRAINT users_role_check 
       CHECK (role IN ('customer', 'agent', 'admin', 'super_admin'));`,
    ];

    for (let i = 0; i < sqlCommands.length; i++) {
      const sql = sqlCommands[i];
      console.log(`   ‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà ${i + 1}...`);

      try {
        // ‡πÉ‡∏ä‡πâ RPC ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ô SQL
        const { data, error } = await supabase.rpc("exec_sql", { sql });
        if (error) {
          console.log(
            `   ‚ö†Ô∏è  ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà ${i + 1} ‡∏≠‡∏≤‡∏à‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ú‡πà‡∏≤‡∏ô RPC:`,
            error.message
          );
        } else {
          console.log(`   ‚úÖ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà ${i + 1} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
        }
      } catch (err) {
        console.log(
          `   ‚ö†Ô∏è  ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà ${i + 1} ‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏±‡∏ô‡πÉ‡∏ô SQL Editor:`,
          err.message
        );
      }
    }

    console.log(
      "\nüìù ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ô‡πà‡πÉ‡∏à ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á SQL ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô Supabase SQL Editor:"
    );
    console.log("=".repeat(60));
    sqlCommands.forEach((sql, index) => {
      console.log(`-- ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà ${index + 1}`);
      console.log(sql);
      console.log("");
    });
    console.log("=".repeat(60));

    console.log(
      "\nüîó Supabase SQL Editor: https://app.supabase.com/project/kxkryylxfkkjgbgtxfog/sql"
    );
  } catch (error) {
    console.error("üí• ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", error.message);
  }
}

fixRoleConstraint();
