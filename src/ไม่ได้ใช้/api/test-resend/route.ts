import { sendOTPEmail } from "@/lib/resend-email";
import { NextRequest, NextResponse } from "next/server";

export async function POST(request: NextRequest) {
  try {
    const { email } = await request.json();

    if (!email) {
      return NextResponse.json(
        { error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö" },
        { status: 400 }
      );
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ Resend API key ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!process.env.RESEND_API_KEY) {
      return NextResponse.json(
        {
          error: "‡πÑ‡∏°‡πà‡∏û‡∏ö RESEND_API_KEY ‡πÉ‡∏ô environment variables",
          solution: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ RESEND_API_KEY ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå .env.local",
        },
        { status: 500 }
      );
    }

    console.log("üß™ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ú‡πà‡∏≤‡∏ô Resend...");
    console.log(`üìß ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á: ${email}`);

    // ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    const testOTP = "123456";
    const result = await sendOTPEmail({
      to: email,
      otpCode: testOTP,
    });

    if (result.success) {
      return NextResponse.json({
        success: true,
        message: `‚úÖ ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏ú‡πà‡∏≤‡∏ô Resend!`,
        details: {
          to: email,
          testOTP: testOTP,
          messageId: result.messageId,
          provider: result.provider,
          timestamp: new Date().toISOString(),
        },
      });
    } else {
      throw new Error("‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    }
  } catch (error: unknown) {
    console.error(
      "‚ùå ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö Resend ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:",
      error instanceof Error ? error.message : error
    );

    return NextResponse.json(
      {
        success: false,
        error: `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÑ‡∏î‡πâ: ${
          error instanceof Error ? error.message : "Unknown error"
        }`,
        troubleshooting: {
          apiKey: process.env.RESEND_API_KEY
            ? "‚úÖ ‡∏°‡∏µ API Key"
            : "‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ API Key",
          suggestions: [
            "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ RESEND_API_KEY ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á",
            "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á",
            "‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô Resend Dashboard",
          ],
        },
      },
      { status: 500 }
    );
  }
}

export async function GET() {
  return NextResponse.json({
    message: "Resend Email Test API",
    usage: 'POST ‡πÑ‡∏õ‡∏¢‡∏±‡∏á endpoint ‡∏ô‡∏µ‡πâ‡∏û‡∏£‡πâ‡∏≠‡∏° { "email": "your-email@example.com" }',
    status: {
      resendApiKey: process.env.RESEND_API_KEY
        ? "‚úÖ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"
        : "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö API Key",
      environment: process.env.NODE_ENV || "development",
    },
  });
}
