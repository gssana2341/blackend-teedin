import { NextResponse } from "next/server";

type DependencyStatus =
  | "‚ùì ‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"
  | "‚úÖ ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏•‡πâ‡∏ß"
  | "‚ùå ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á";

interface TroubleshootingItem {
  issue: string;
  solution: string;
}

export async function GET() {
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Environment Variables
  const envCheck = {
    resend: {
      apiKey: process.env.RESEND_API_KEY
        ? "‚úÖ ‡∏°‡∏µ API Key"
        : "‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ RESEND_API_KEY",
      keyFormat: process.env.RESEND_API_KEY?.startsWith("re_")
        ? "‚úÖ ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"
        : "‚ùå ‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ re_",
      keyLength: process.env.RESEND_API_KEY
        ? `${process.env.RESEND_API_KEY.length} ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£`
        : "N/A",
    },
    gmail: {
      user: process.env.SMTP_USER ? "‚úÖ ‡∏°‡∏µ SMTP_USER" : "‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ SMTP_USER",
      pass: process.env.SMTP_PASS ? "‚úÖ ‡∏°‡∏µ SMTP_PASS" : "‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ SMTP_PASS",
      host: process.env.SMTP_HOST || "smtp.gmail.com",
      port: process.env.SMTP_PORT || "587",
    },
    supabase: {
      url: process.env.NEXT_PUBLIC_SUPABASE_URL
        ? "‚úÖ ‡∏°‡∏µ Supabase URL"
        : "‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ SUPABASE_URL",
      serviceKey: process.env.SUPABASE_SERVICE_ROLE_KEY
        ? "‚úÖ ‡∏°‡∏µ Service Role Key"
        : "‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ SERVICE_ROLE_KEY",
    },
  };

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Dependencies
  const dependencies: Record<"resend" | "nodemailer", DependencyStatus> = {
    resend: "‚ùì ‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞",
    nodemailer: "‚ùì ‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞",
  };

  try {
    await import("resend");
    dependencies.resend = "‚úÖ ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏•‡πâ‡∏ß";
  } catch {
    dependencies.resend = "‚ùå ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á";
  }

  try {
    await import("nodemailer");
    dependencies.nodemailer = "‚úÖ ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏•‡πâ‡∏ß";
  } catch {
    dependencies.nodemailer = "‚ùå ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á";
  }

  // ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤
  const troubleshooting: TroubleshootingItem[] = [];

  if (!process.env.RESEND_API_KEY) {
    troubleshooting.push({
      issue: "‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ RESEND_API_KEY",
      solution:
        "‡∏™‡∏£‡πâ‡∏≤‡∏á API Key ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà https://resend.com/api-keys ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô .env.local",
    });
  } else if (!process.env.RESEND_API_KEY.startsWith("re_")) {
    troubleshooting.push({
      issue: "‚ùå RESEND_API_KEY ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á",
      solution: 'API Key ‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ "re_" ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö API Key',
    });
  }

  if (!process.env.SMTP_USER || !process.env.SMTP_PASS) {
    troubleshooting.push({
      issue: "‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Gmail SMTP (Fallback)",
      solution:
        "‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ SMTP_USER ‡πÅ‡∏•‡∏∞ SMTP_PASS ‡πÉ‡∏ô .env.local ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô fallback",
    });
  }

  if (dependencies.resend !== "‚úÖ ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏•‡πâ‡∏ß") {
    troubleshooting.push({
      issue: "‚ùå ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Resend",
      solution: "‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: pnpm add resend ‡∏´‡∏£‡∏∑‡∏≠ npm install resend",
    });
  }

  // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö
  const systemStatus = {
    primaryEmailService:
      process.env.RESEND_API_KEY && process.env.RESEND_API_KEY.startsWith("re_")
        ? "Resend (‡∏û‡∏£‡πâ‡∏≠‡∏°)"
        : "Resend (‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°)",
    fallbackEmailService:
      process.env.SMTP_USER && process.env.SMTP_PASS
        ? "Gmail SMTP (‡∏û‡∏£‡πâ‡∏≠‡∏°)"
        : "Gmail SMTP (‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°)",
    debugMode:
      !process.env.RESEND_API_KEY && !process.env.SMTP_USER
        ? "‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á OTP ‡πÉ‡∏ô Console)"
        : "‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô",
  };

  return NextResponse.json(
    {
      title: "üîç Email System Diagnostic",
      timestamp: new Date().toISOString(),
      environment: process.env.NODE_ENV || "development",

      systemStatus,
      environmentVariables: envCheck,
      dependencies,
      troubleshooting,

      nextSteps:
        troubleshooting.length > 0
          ? [
              "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ï‡∏≤‡∏° troubleshooting ‡∏Ç‡πâ‡∏≤‡∏á‡∏ï‡πâ‡∏ô",
              "Restart development server ‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç .env.local",
              "‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
            ]
          : [
              "‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!",
              "‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà /api/test-resend",
              "‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏ö forgot password ‡πÉ‡∏ô‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå",
            ],

      testingEndpoints: {
        resendTest: "POST /api/test-resend",
        smtpTest: "POST /api/test-smtp",
        sendOtp: "POST /api/send-otp",
        diagnostics: "GET /api/email-diagnostics (‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ)",
      },
    },
    {
      headers: {
        "Content-Type": "application/json; charset=utf-8",
      },
    }
  );
}
