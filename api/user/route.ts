import { NextRequest, NextResponse } from "next/server";
import { supabase } from "@/lib/supabase";
import { createSupabaseAdmin } from "@/lib/supabase-admin";
import { createClient } from "@supabase/supabase-js";

// GET - ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
export async function GET(request: NextRequest) {
  try {
    // ‡∏î‡∏∂‡∏á authorization header
    const authHeader = request.headers.get("authorization");
    if (!authHeader || !authHeader.startsWith("Bearer ")) {
      return NextResponse.json(
        { error: "‡πÑ‡∏°‡πà‡∏û‡∏ö Authorization header" },
        { status: 401 }
      );
    }

    const token = authHeader.replace("Bearer ", "");

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á supabase client ‡πÉ‡∏´‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏° token
    const supabaseWithToken = createClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL!,
      process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
      {
        global: {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        },
      }
    );

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö user ‡∏à‡∏≤‡∏Å token
    const { data: authData, error: authError } =
      await supabaseWithToken.auth.getUser();

    if (authError || !authData.user) {
      console.error("Auth error:", authError);
      return NextResponse.json({ error: "Token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" }, { status: 401 });
    }

    const userId = authData.user.id;
    const userEmail = authData.user.email;

    console.log("üîç Looking for user:", userEmail, "with ID:", userId); // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å custom users table
    const { data: userData, error: userError } = await supabase
      .from("users")
      .select(
        "id, email, role, first_name, last_name, phone, password, created_at, updated_at"
      )
      .eq("email", userEmail)
      .limit(1)
      .single();

    if (userError) {
      console.error("Error fetching user data:", userError);
      console.log("Error details:", {
        code: userError.code,
        message: userError.message,
        details: userError.details,
        hint: userError.hint,
      });
      return NextResponse.json(
        { error: `Database error: ${userError.message}` },
        { status: 500 }
      );
    }

    console.log("‚úÖ User data found:", userData);

    // ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏°‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô)
    const { password, ...userDataSafe } = userData;

    return NextResponse.json({
      success: true,
      user: {
        ...userDataSafe,
        // ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏´‡πá‡∏ô (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏ó‡∏î‡∏™‡∏≠‡∏ö)
        password: password === "supabase_managed" ? "‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢" : password,
      },
    });
  } catch (error) {
    console.error("API Error:", error);
    return NextResponse.json(
      { error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå" },
      { status: 500 }
    );
  }
}

// PUT - ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
export async function PUT(request: NextRequest) {
  try {
    // ‡∏î‡∏∂‡∏á authorization header
    const authHeader = request.headers.get("authorization");
    if (!authHeader || !authHeader.startsWith("Bearer ")) {
      return NextResponse.json(
        { error: "‡πÑ‡∏°‡πà‡∏û‡∏ö Authorization header" },
        { status: 401 }
      );
    }

    const token = authHeader.replace("Bearer ", "");
    const body = await request.json();

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö token ‡∏Å‡∏±‡∏ö Supabase
    const { data: authData, error: authError } =
      await supabase.auth.getUser(token);

    if (authError || !authData.user) {
      return NextResponse.json({ error: "Token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" }, { status: 401 });
    }

    const userId = authData.user.id;
    const userEmail = authData.user.email;
    const { first_name, last_name, phone, password } = body;

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á admin client ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
    const supabaseAdmin = createSupabaseAdmin();

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô custom users table
    type UserUpdatePayload = {
      updated_at: string;
      first_name?: string;
      last_name?: string;
      phone?: string;
      password?: string;
    };

    const updateData: UserUpdatePayload = {
      updated_at: new Date().toISOString(),
    };

    if (first_name !== undefined) updateData.first_name = first_name;
    if (last_name !== undefined) updateData.last_name = last_name;
    if (phone !== undefined) updateData.phone = phone;
    if (password !== undefined && password !== "‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢") {
      updateData.password = password;
    }

    const { error: updateError } = await supabase
      .from("users")
      .update(updateData)
      .eq("email", userEmail);

    if (updateError) {
      console.error("Error updating user data:", updateError);
      return NextResponse.json(
        { error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ" },
        { status: 500 }
      );
    }

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏ô Supabase Auth (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á)
    if (password && password !== "‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢") {
      console.log("üîß Updating password in Supabase Auth...");
      const { error: authUpdateError } =
        await supabaseAdmin.auth.admin.updateUserById(userId, {
          password: password,
        });

      if (authUpdateError) {
        console.error(
          "Error updating Supabase Auth password:",
          authUpdateError
        );
        // ‡πÑ‡∏°‡πà return error ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ custom table ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß
        console.log(
          "‚ö†Ô∏è Auth password update failed but custom table updated successfully"
        );
      } else {
        console.log("‚úÖ Password updated in both Auth and custom table");
      }
    }

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï user metadata ‡πÉ‡∏ô Supabase Auth
    if (first_name || last_name || phone) {
      const userMetadata: Record<string, string> = {};
      if (first_name) userMetadata.first_name = first_name;
      if (last_name) userMetadata.last_name = last_name;
      if (phone) userMetadata.phone = phone;

      const { error: metadataError } =
        await supabaseAdmin.auth.admin.updateUserById(userId, {
          user_metadata: userMetadata,
        });

      if (metadataError) {
        console.error("Error updating user metadata:", metadataError);
      } else {
        console.log("‚úÖ User metadata updated");
      }
    }

    return NextResponse.json({
      success: true,
      message: "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
    });
  } catch (error) {
    console.error("API Error:", error);
    return NextResponse.json(
      { error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå" },
      { status: 500 }
    );
  }
}

// DELETE - ‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏ö‡∏ö‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ (‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á)
export async function DELETE(request: NextRequest) {
  try {
    // ‡∏î‡∏∂‡∏á query parameter ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö email ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö
    const url = new URL(request.url);
    const userEmail = url.searchParams.get("email");

    if (!userEmail) {
      return NextResponse.json(
        { error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö" },
        { status: 400 }
      );
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö authorization (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô admin ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
    const authHeader = request.headers.get("authorization");
    if (!authHeader || !authHeader.startsWith("Bearer ")) {
      return NextResponse.json(
        { error: "‡πÑ‡∏°‡πà‡∏û‡∏ö Authorization header" },
        { status: 401 }
      );
    }

    const token = authHeader.replace("Bearer ", "");

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö token ‡πÅ‡∏•‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå admin
    const { data: authData, error: authError } =
      await supabase.auth.getUser(token);

    if (authError || !authData.user) {
      return NextResponse.json({ error: "Token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" }, { status: 401 });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô admin ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const { data: userData } = await supabase
      .from("users")
      .select("role")
      .eq("email", authData.user.email)
      .single();

    if (!userData || userData.role !== "admin") {
      return NextResponse.json(
        { error: "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ" },
        { status: 403 }
      );
    }

    console.log(`üóëÔ∏è Admin ${authData.user.email} ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: ${userEmail}`);

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á admin client
    const supabaseAdmin = createSupabaseAdmin();

    // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö admin ‡πÄ‡∏≠‡∏á
    if (userEmail === authData.user.email) {
      return NextResponse.json(
        { error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÑ‡∏î‡πâ" },
        { status: 400 }
      );
    }

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö
    const { data: targetUser } = await supabase
      .from("users")
      .select("*")
      .eq("email", userEmail)
      .single();

    if (!targetUser) {
      return NextResponse.json(
        { error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏" },
        { status: 404 }
      );
    }

    const userId = targetUser.id;

    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
    console.log(`üìã ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö User ID: ${userId}`);

    // 1. ‡∏•‡∏ö‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á properties (‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô agent)
    const { error: propertiesError } = await supabaseAdmin
      .from("properties")
      .delete()
      .eq("agent_id", userId);

    if (propertiesError && !propertiesError.message.includes("No rows")) {
      console.error("Properties deletion error:", propertiesError);
    } else {
      console.log("‚úÖ ‡∏•‡∏ö properties ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    }

    // 2. ‡∏•‡∏ö‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á agents (‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô agent)
    const { error: agentsError } = await supabaseAdmin
      .from("agents")
      .delete()
      .eq("user_id", userId);

    if (agentsError && !agentsError.message.includes("No rows")) {
      console.error("Agents deletion error:", agentsError);
    } else {
      console.log("‚úÖ ‡∏•‡∏ö agents ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    }

    // 3. ‡∏•‡∏ö‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á admins (‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô admin)
    const { error: adminsError } = await supabaseAdmin
      .from("admins")
      .delete()
      .eq("user_id", userId);

    if (adminsError && !adminsError.message.includes("No rows")) {
      console.error("Admins deletion error:", adminsError);
    } else {
      console.log("‚úÖ ‡∏•‡∏ö admins ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    }

    // 4. ‡∏•‡∏ö‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á customers (‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô customer)
    const { error: customersError } = await supabaseAdmin
      .from("customers")
      .delete()
      .eq("user_id", userId);

    if (customersError && !customersError.message.includes("No rows")) {
      console.error("Customers deletion error:", customersError);
    } else {
      console.log("‚úÖ ‡∏•‡∏ö customers ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    }

    // 5. ‡∏•‡∏ö‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á profiles
    const { error: profilesError } = await supabaseAdmin
      .from("profiles")
      .delete()
      .eq("user_id", userId);

    if (profilesError && !profilesError.message.includes("No rows")) {
      console.error("Profiles deletion error:", profilesError);
    } else {
      console.log("‚úÖ ‡∏•‡∏ö profiles ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    }

    // 6. ‡∏•‡∏ö‡∏à‡∏≤‡∏Å custom users table
    const { error: usersError } = await supabaseAdmin
      .from("users")
      .delete()
      .eq("email", userEmail);

    if (usersError) {
      console.error("Users table deletion error:", usersError);
      return NextResponse.json(
        { error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ" },
        { status: 500 }
      );
    } else {
      console.log("‚úÖ ‡∏•‡∏ö‡∏à‡∏≤‡∏Å users table ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    }

    // 7. ‡∏•‡∏ö‡∏à‡∏≤‡∏Å Supabase Auth
    const { data: authUsers } = await supabaseAdmin.auth.admin.listUsers();
    const authUser = authUsers.users.find(u => u.email === userEmail);

    if (authUser) {
      const { error: authDeleteError } =
        await supabaseAdmin.auth.admin.deleteUser(authUser.id);

      if (authDeleteError) {
        console.error("Auth user deletion error:", authDeleteError);
        // ‡∏ñ‡∏∂‡∏á‡πÅ‡∏°‡πâ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏à‡∏≤‡∏Å Auth ‡πÑ‡∏î‡πâ ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏•‡∏ö‡∏à‡∏≤‡∏Å users table ‡πÅ‡∏•‡πâ‡∏ß
        console.log(
          "‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏à‡∏≤‡∏Å Supabase Auth ‡πÑ‡∏î‡πâ ‡πÅ‡∏ï‡πà‡∏•‡∏ö‡∏à‡∏≤‡∏Å users table ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß"
        );
      } else {
        console.log("‚úÖ ‡∏•‡∏ö‡∏à‡∏≤‡∏Å Supabase Auth ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
      }
    } else {
      console.log("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ô Supabase Auth");
    }

    console.log(`üéâ ‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${userEmail} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!`);

    return NextResponse.json({
      success: true,
      message: `‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${userEmail} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß (‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á)`,
    });
  } catch (error) {
    console.error("Delete user API Error:", error);
    return NextResponse.json(
      { error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ" },
      { status: 500 }
    );
  }
}
