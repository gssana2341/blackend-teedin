name: Deploy to Production

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Setup SSH
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SERVER_SSH_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H 34.158.61.147 >> ~/.ssh/known_hosts

      - name: Deploy to Server
        run: |
          echo ">>> Connecting to server and deploying..."
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no teedineasy_team@34.158.61.147 << 'ENDSSH'
            set -e
            
            echo ">>> Navigating to project directory..."
            cd $HOME/teedin-backend
            
            echo ">>> Backing up .env files..."
            if [ -f .env.production ]; then
              cp .env.production .env.production.backup
            fi
            
            echo ">>> Resetting local changes (excluding .env files)..."
            git reset --hard HEAD
            git clean -fd -e '.env*' -e 'logs/' -e 'ssl/'
            
            echo ">>> Restoring .env files..."
            if [ -f .env.production.backup ]; then
              mv .env.production.backup .env.production
            fi
            
            echo ">>> Pulling latest code from GitHub..."
            PREV_COMMIT=$(git rev-parse HEAD)
            git pull origin main
            CURRENT_COMMIT=$(git rev-parse HEAD)
            
            echo ">>> Ensuring .env.production exists..."
            if [ ! -f .env.production ]; then
              echo "⚠️  .env.production not found! Creating from example..."
              cp env.production.example .env.production
              echo "❌ ERROR: Please configure .env.production with actual values!"
              exit 1
            fi
            
            echo ">>> Removing .env file if exists..."
            rm -f .env
            
            echo ">>> Checking if rebuild is needed..."
            NEEDS_REBUILD=false
            if [ "$PREV_COMMIT" != "$CURRENT_COMMIT" ]; then
              if git diff $PREV_COMMIT $CURRENT_COMMIT --name-only | grep -qE 'Dockerfile|package.json|package-lock.json|docker-compose'; then
                NEEDS_REBUILD=true
              fi
            else
              NEEDS_REBUILD=true
            fi
            
            if [ "$NEEDS_REBUILD" = true ]; then
              echo ">>> Stopping existing containers..."
              docker compose -f docker-compose.prod.yml down || true
              
              echo ">>> Building Docker images (with cache)..."
              docker compose -f docker-compose.prod.yml build
              
              echo ">>> Starting containers..."
              docker compose -f docker-compose.prod.yml up -d
            else
              echo ">>> No rebuild needed, restarting containers..."
              docker compose -f docker-compose.prod.yml restart
            fi
            
            echo ">>> Waiting for services to start..."
            sleep 10
            
            echo ">>> Checking container status..."
            docker compose -f docker-compose.prod.yml ps
            
            echo ">>> Checking logs..."
            docker compose -f docker-compose.prod.yml logs --tail=30 teedin-backend
            
            echo ">>> Deployment completed!"
            echo "🎉 API is available at: http://34.158.61.147:3001"
          ENDSSH