"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.sendTwilioOTP = sendTwilioOTP;
exports.verifyTwilioOTP = verifyTwilioOTP;
const twilio_1 = __importDefault(require("twilio"));
// ‡∏™‡∏£‡πâ‡∏≤‡∏á Twilio client
const client = (0, twilio_1.default)(process.env.TWILIO_ACCOUNT_SID, process.env.TWILIO_AUTH_TOKEN);
// ‡∏™‡πà‡∏á OTP ‡∏ú‡πà‡∏≤‡∏ô Twilio Verify Service
async function sendTwilioOTP(phone) {
    try {
        console.log("üì± ‡∏™‡πà‡∏á OTP ‡∏ú‡πà‡∏≤‡∏ô Twilio ‡πÑ‡∏õ‡∏¢‡∏±‡∏á:", phone);
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ environment variables ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (!process.env.TWILIO_ACCOUNT_SID ||
            !process.env.TWILIO_AUTH_TOKEN ||
            (!process.env.TWILIO_VERIFY_SID && !process.env.TWILIO_VERIFY_SERVICE_SID)) {
            console.warn("‚ö†Ô∏è Twilio environment variables not configured, using mock response");
            // Mock response ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö development
            return {
                success: true,
                verificationSid: `mock_verification_${Date.now()}`,
            };
        }
        // Normalize phone number to E.164 format
        const normalizePhone = (p) => {
            const digits = p.replace(/[^0-9+]/g, "");
            if (digits.startsWith("+"))
                return digits;
            if (digits.startsWith("66"))
                return "+" + digits;
            if (digits.startsWith("0"))
                return "+66" + digits.slice(1);
            return "+" + digits;
        };
        const e164Phone = normalizePhone(phone);
        console.log("üìû Normalized phone:", e164Phone);
        const verification = await client.verify.v2
            .services(process.env.TWILIO_VERIFY_SERVICE_SID || process.env.TWILIO_VERIFY_SID)
            .verifications.create({
            to: e164Phone,
            channel: "sms",
        });
        console.log("‚úÖ OTP ‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", {
            sid: verification.sid,
            status: verification.status,
            to: e164Phone,
        });
        return {
            success: true,
            verificationSid: verification.sid,
        };
    }
    catch (error) {
        const message = error instanceof Error ? error.message : String(error);
        console.error("‚ùå Twilio OTP Error:", message);
        // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô development environment ‡πÅ‡∏•‡∏∞‡∏°‡∏µ credentials ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ mock response
        if (process.env.NODE_ENV === "development" &&
            (process.env.TWILIO_ACCOUNT_SID || process.env.TWILIO_AUTH_TOKEN)) {
            console.warn("‚ö†Ô∏è Using mock response for development");
            return {
                success: true,
                verificationSid: `mock_verification_${Date.now()}`,
            };
        }
        return {
            success: false,
            error: message || "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á OTP ‡πÑ‡∏î‡πâ",
        };
    }
}
// ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô OTP ‡∏ú‡πà‡∏≤‡∏ô Twilio Verify Service
async function verifyTwilioOTP(phone, code) {
    try {
        console.log("üîê ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô OTP:", { phone, code });
        // Normalize phone number
        const normalizePhone = (p) => {
            const digits = p.replace(/[^0-9+]/g, "");
            if (digits.startsWith("+"))
                return digits;
            if (digits.startsWith("66"))
                return "+" + digits;
            if (digits.startsWith("0"))
                return "+66" + digits.slice(1);
            return "+" + digits;
        };
        const e164Phone = normalizePhone(phone);
        const verificationCheck = await client.verify.v2
            .services(process.env.TWILIO_VERIFY_SERVICE_SID || process.env.TWILIO_VERIFY_SID)
            .verificationChecks.create({
            to: e164Phone,
            code: code,
        });
        console.log("üîê ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô:", {
            status: verificationCheck.status,
            valid: verificationCheck.valid,
            to: e164Phone,
        });
        if (verificationCheck.status === "approved") {
            return {
                success: true,
                status: verificationCheck.status,
            };
        }
        else {
            return {
                success: false,
                error: "‡∏£‡∏´‡∏±‡∏™ OTP ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏",
                status: verificationCheck.status,
            };
        }
    }
    catch (error) {
        const message = error instanceof Error ? error.message : String(error);
        console.error("‚ùå Twilio Verify Error:", message);
        return {
            success: false,
            error: message || "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô OTP ‡πÑ‡∏î‡πâ",
        };
    }
}
//# sourceMappingURL=twilio-sms.js.map